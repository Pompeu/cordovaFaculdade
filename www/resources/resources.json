[
  { "id" : 1,
    "name" : "Angular Controllers",
    "img" : "/img/controller.jpg",
    "details" : "In Angular, a Controller is a JavaScript constructor function that is used to augment the Angular Scope. When a Controller is attached to the DOM via the ng-controller directive, Angular will instantiate a new Controller object, using the specified Controller's constructor function. A new child scope will be available as an injectable parameter to the Controller's constructor function as $scope."
  },
  { "id" : 2,
    "name" : "Angular Directives",
    "img" : "/img/directive.png",
    "details" : "At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element or even transform the DOM element and its children. Angular comes with a set of these directives built-in, like ngBind, ngModel, and ngClass. Much like you create controllers and services, you can create your own directives for Angular to use. When Angular bootstraps your application, the HTML compiler traverses the DOM matching directives against the DOM elements."
  },
  { "id" : 3,
    "name" : "Angular Filters",
    "img" : "/img/filter.jpeg",
    "details" : "A filter formats the value of an expression for display to the user. They can be used in view templates, controllers or services and it is easy to define your own filter. The underlying API is the filterProvider."
  },
  { "id" : 4,
    "name" : "Angular Services",
    "img" : "/img/Service.jpeg",
    "details" : "Angular services are substitutable objects that are wired together using dependency injection (DI). You can use services to organize and share code across your app. Angular services are: Lazily instantiated – Angular only instantiates a service when an application component depends on it. Singletons – Each component dependent on a service gets a reference to the single instance generated by the service factory."
  },
  { "id" : 5,
    "name" : "Dependency Injection",
    "img" : "/img/dpinjection.jpg",
    "details" : "Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies. The Angular injector subsystem is in charge of creating components, resolving their dependencies, and providing them to other components as requested."
  },
  { "id" : 6,
    "name" : "Scopes",
    "img" : "/img/scope.jpeg",
    "details" : "scope is an object that refers to the application model. It is an execution context for expressions. Scopes are arranged in hierarchical structure which mimic the DOM structure of the application. Scopes can watch expressions and propagate events."
  }
]